from onion import I2C
import time

# Constants
SSD1306_I2C_ADDRESS = 0x3C    # 011110+SA0+RW - 0x3C or 0x3D
SSD1306_SETCONTRAST = 0x81
SSD1306_DISPLAYALLON_RESUME = 0xA4
SSD1306_DISPLAYALLON = 0xA5
SSD1306_NORMALDISPLAY = 0xA6
SSD1306_INVERTDISPLAY = 0xA7
SSD1306_DISPLAYOFF = 0xAE
SSD1306_DISPLAYON = 0xAF
SSD1306_SETDISPLAYOFFSET = 0xD3
SSD1306_SETCOMPINS = 0xDA
SSD1306_SETVCOMDETECT = 0xDB
SSD1306_SETDISPLAYCLOCKDIV = 0xD5
SSD1306_SETPRECHARGE = 0xD9
SSD1306_SETMULTIPLEX = 0xA8
SSD1306_SETLOWCOLUMN = 0x00
SSD1306_SETHIGHCOLUMN = 0x10
SSD1306_SETSTARTLINE = 0x40
SSD1306_MEMORYMODE = 0x20
SSD1306_COLUMNADDR = 0x21
SSD1306_PAGEADDR = 0x22
SSD1306_COMSCANINC = 0xC0
SSD1306_COMSCANDEC = 0xC8
SSD1306_SEGREMAP = 0xA0
SSD1306_CHARGEPUMP = 0x8D
SSD1306_EXTERNALVCC = 0x1
SSD1306_SWITCHCAPVCC = 0x2

# Scrolling constants
SSD1306_ACTIVATE_SCROLL = 0x2F
SSD1306_DEACTIVATE_SCROLL = 0x2E
SSD1306_SET_VERTICAL_SCROLL_AREA = 0xA3
SSD1306_RIGHT_HORIZONTAL_SCROLL = 0x26
SSD1306_LEFT_HORIZONTAL_SCROLL = 0x27
SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL = 0x29
SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL = 0x2A

ASCII_TABLE = [
0x00,0x00,0x00,0x00,0x00, # SPACE

0x00,0x00,0x4F,0x00,0x00, # !
0x00,0x07,0x00,0x07,0x00, # "
0x14,0x7F,0x14,0x7F,0x14, # #
0x24,0x2A,0x7F,0x2A,0x12, # $
0x23,0x13,0x08,0x64,0x62, # %
0x36,0x49,0x55,0x22,0x50, # &
0x00,0x05,0x03,0x00,0x00, # '
0x00,0x1C,0x22,0x41,0x00, # (
0x00,0x41,0x22,0x1C,0x00, # )
0x14,0x08,0x3E,0x08,0x14, # *
0x08,0x08,0x3E,0x08,0x08, # +
0x00,0x50,0x30,0x00,0x00, # ,
0x08,0x08,0x08,0x08,0x08, # -
0x00,0x60,0x60,0x00,0x00, # .
0x20,0x10,0x08,0x04,0x02, # /

0x3E,0x51,0x49,0x45,0x3E, # 0
0x00,0x42,0x7F,0x40,0x00, # 1
0x42,0x61,0x51,0x49,0x46, # 2
0x21,0x41,0x45,0x4B,0x31, # 3
0x18,0x14,0x12,0x7F,0x10, # 4
0x27,0x45,0x45,0x45,0x39, # 5
0x3C,0x4A,0x49,0x49,0x30, # 6
0x01,0x71,0x09,0x05,0x03, # 7
0x36,0x49,0x49,0x49,0x36, # 8
0x06,0x49,0x49,0x29,0x1E, # 9

0x36,0x36,0x00,0x00,0x00, # :
0x56,0x36,0x00,0x00,0x00, # ;
0x08,0x14,0x22,0x41,0x00, # <
0x14,0x14,0x14,0x14,0x14, # =
0x00,0x41,0x22,0x14,0x08, # >
0x02,0x01,0x51,0x09,0x06, # ?
0x30,0x49,0x79,0x41,0x3E, # @

0x7E,0x11,0x11,0x11,0x7E, # A
0x7F,0x49,0x49,0x49,0x36, # B
0x3E,0x41,0x41,0x41,0x22, # C
0x7F,0x41,0x41,0x22,0x1C, # D
0x7F,0x49,0x49,0x49,0x41, # E
0x7F,0x09,0x09,0x09,0x01, # F
0x3E,0x41,0x49,0x49,0x7A, # G
0x7F,0x08,0x08,0x08,0x7F, # H
0x00,0x41,0x7F,0x41,0x00, # I
0x20,0x40,0x41,0x3F,0x01, # J
0x7F,0x08,0x14,0x22,0x41, # K
0x7F,0x40,0x40,0x40,0x40, # L
0x7F,0x02,0x0C,0x02,0x7F, # M
0x7F,0x04,0x08,0x10,0x7F, # N
0x3E,0x41,0x41,0x41,0x3E, # O
0x7F,0x09,0x09,0x09,0x06, # P
0x3E,0x41,0x51,0x21,0x5E, # Q
0x7F,0x09,0x19,0x29,0x46, # R
0x46,0x49,0x49,0x49,0x31, # S
0x01,0x01,0x7F,0x01,0x01, # T
0x3F,0x40,0x40,0x40,0x3F, # U
0x1F,0x20,0x40,0x20,0x1F, # V
0x3F,0x40,0x30,0x40,0x3F, # W
0x63,0x14,0x08,0x14,0x63, # X
0x07,0x08,0x70,0x08,0x07, # Y
0x61,0x51,0x49,0x45,0x43, # Z

0x00,0x7F,0x41,0x41,0x00, # [
0x02,0x04,0x08,0x10,0x20, # backslash
0x00,0x41,0x41,0x7F,0x00, # ]
0x04,0x02,0x01,0x02,0x04, # ^
0x40,0x40,0x40,0x40,0x40, # _
0x00,0x01,0x02,0x04,0x00, # `

0x20,0x54,0x54,0x54,0x78, # a
0x7F,0x50,0x48,0x48,0x30, # b
0x38,0x44,0x44,0x44,0x20, # c
0x38,0x44,0x44,0x48,0x7F, # d
0x38,0x54,0x54,0x54,0x18, # e
0x08,0x7E,0x09,0x01,0x02, # f
0x0C,0x52,0x52,0x52,0x3E, # g
0x7F,0x08,0x04,0x04,0x78, # h
0x00,0x44,0x7D,0x40,0x00, # i
0x20,0x40,0x44,0x3D,0x00, # j
0x7F,0x10,0x28,0x44,0x00, # k
0x00,0x41,0x7F,0x40,0x00, # l
0x78,0x04,0x58,0x44,0x78, # m
0x7C,0x08,0x04,0x04,0x78, # n
0x38,0x44,0x44,0x44,0x38, # o
0x7C,0x14,0x14,0x14,0x08, # p
0x08,0x14,0x14,0x18,0x7C, # q
0x7C,0x08,0x04,0x04,0x08, # r
0x48,0x54,0x54,0x54,0x20, # s
0x04,0x3F,0x44,0x40,0x20, # t
0x3C,0x40,0x40,0x20,0x7C, # u
0x1C,0x20,0x40,0x20,0x1C, # v
0x3C,0x40,0x30,0x40,0x3C, # w
0x44,0x28,0x10,0x28,0x44, # x
0x0C,0x50,0x50,0x50,0x3C, # y
0x44,0x64,0x54,0x4C,0x44, # z

0x00,0x08,0x36,0x41,0x00, # {
0x00,0x00,0x7F,0x00,0x00, # |
0x00,0x41,0x36,0x08,0x00, # }
0x0C,0x02,0x0C,0x10,0x0C, # ~
0x00,0x00,0x00,0x00,0x00
]

def get_device():
    return SSD1306_128_64()

class SSD1306Base(object):
    """Base class for SSD1306-based OLED displays.  Implementors should subclass
    and provide an implementation for the _initialize function.
    """
    def __init__(self, width, height, i2c_bus=None,
                i2c_address=SSD1306_I2C_ADDRESS, i2c=None):
        self._i2c = None
        self.width = width
        self.height = height
        self._pages = height/8
        self._buffer = [0]*(width*self._pages)
        self._cursor = 0
        # Handle hardware I2C
        if i2c is not None:
            self._i2c = i2c.get_i2c_device(i2c_address)
        else:
            import I2C as I2C
            if i2c_bus is None:
                self._i2c = I2C.get_i2c_device(i2c_address)
            else:
                self._i2c = I2C.get_i2c_device(i2c_address, busnum=i2c_bus)

    def _initialize(self):
        raise NotImplementedError

    def command(self, c):
        """Send command byte to display."""
        # I2C write.
        control = 0x00   # Co = 0, DC = 0
        self._i2c.write8(control, c)

    def data(self, c):
        """Send byte of data to display."""
        # I2C write.
        control = 0x40   # Co = 0, DC = 0
        self._i2c.write8(control, c)

    def begin(self):
        """Initialize display."""
        # Save vcc state.
        self._vccstate = SSD1306_SWITCHCAPVCC
        # Reset and initialize display.
        self._initialize()
        # Turn on the display.
        self.command(SSD1306_DISPLAYON)

    def display(self):
        """Write display buffer to physical display."""
        self.command(SSD1306_COLUMNADDR)
        self.command(0)              # Column start address. (0 = reset)
        self.command(self.width-1)   # Column end address.
        self.command(SSD1306_PAGEADDR)
        self.command(0)              # Page start address. (0 = reset)
        self.command(self._pages-1)  # Page end address.
        # Write buffer data.
        for i in range(0, len(self._buffer), 32):
            control = 0x40   # Co = 0, DC = 0
            self._i2c.writeList(control, self._buffer[i:i+32])

    def printChar(self, c):
        charIndex = ord(c)
        if c == '\n':
            self.newLine()
        elif charIndex > 0 and charIndex < len(ASCII_TABLE): # valid char

            # at the end of the screen
            if self._cursor >= 128*8-2:
                self.lineScroll()
                # self.clear()

            self._cursor += 1
            if self._cursor%128 >= 126:
                self._cursor+=2

            index = ord(c)-32
            buff = ASCII_TABLE[index*5:index*5+5]
            self._buffer[self._cursor:self._cursor+5] = buff
            self._cursor+=5

    def lineScroll(self):
        self._buffer = self._buffer[128: 128*8-1]+[0x0]*128
        self._cursor = 128*7

    def newLine(self):
        spaceCount = 128-self._cursor%128
        self._cursor += spaceCount

    def printLine(self, text):
        for i in text:
            self.printChar(i)
        self.printChar('\n')
        self.display()

    def invert(self, invert):
        if invert:
            self.command(SSD1306_INVERTDISPLAY)
        else:
            self.command(SSD1306_NORMALDISPLAY)

    def clear(self):
        """Clear contents of image buffer."""
        self._buffer = [0]*(self.width*self._pages)
        self._cursor = 0
        self.display()

    def set_contrast(self, contrast):
        """Sets the contrast of the display.  Contrast should be a value between
        0 and 255."""
        if contrast < 0 or contrast > 255:
            raise ValueError('Contrast must be a value from 0 to 255 (inclusive).')
        self.command(SSD1306_SETCONTRAST)
        self.command(contrast)

    def dim(self, dim):
        """Adjusts contrast to dim the display if dim is True, otherwise sets the
        contrast to normal brightness if dim is False.
        """
        # Assume dim display.
        contrast = 0
        # Adjust contrast based on VCC if not dimming.
        if not dim:
            if self._vccstate == SSD1306_EXTERNALVCC:
                contrast = 0x9F
            else:
                contrast = 0xCF

class SSD1306_128_64(SSD1306Base):
    def __init__(self, i2c_bus=None, i2c_address=SSD1306_I2C_ADDRESS,
                 i2c=None):
        # Call base class constructor.
        super(SSD1306_128_64, self).__init__(128, 64, i2c_bus, i2c_address, i2c)
        self.begin()
        self.clear()

    def _initialize(self):
        # 128x64 pixel specific initialization.
        self.command(SSD1306_DISPLAYOFF)                    # 0xAE
        self.command(SSD1306_SETDISPLAYCLOCKDIV)            # 0xD5
        self.command(0x80)                                  # the suggested ratio 0x80
        self.command(SSD1306_SETMULTIPLEX)                  # 0xA8
        self.command(0x3F)
        self.command(SSD1306_SETDISPLAYOFFSET)              # 0xD3
        self.command(0x0)                                   # no offset
        self.command(SSD1306_SETSTARTLINE | 0x0)            # line #0
        self.command(SSD1306_CHARGEPUMP)                    # 0x8D
        if self._vccstate == SSD1306_EXTERNALVCC:
            self.command(0x10)
        else:
            self.command(0x14)
        self.command(SSD1306_MEMORYMODE)                    # 0x20
        self.command(0x00)                                  # 0x0 act like ks0108
        self.command(SSD1306_SEGREMAP | 0x1)
        self.command(SSD1306_COMSCANDEC)
        self.command(SSD1306_SETCOMPINS)                    # 0xDA
        self.command(0x12)
        self.command(SSD1306_SETCONTRAST)                   # 0x81
        if self._vccstate == SSD1306_EXTERNALVCC:
            self.command(0x9F)
        else:
            self.command(0xCF)
        self.command(SSD1306_SETPRECHARGE)                  # 0xd9
        if self._vccstate == SSD1306_EXTERNALVCC:
            self.command(0x22)
        else:
            self.command(0xF1)
        self.command(SSD1306_SETVCOMDETECT)                 # 0xDB
        self.command(0x40)
        self.command(SSD1306_DISPLAYALLON_RESUME)           # 0xA4
        self.command(SSD1306_NORMALDISPLAY)                 # 0xA6

        self.command(SSD1306_SEGREMAP);                        # reverse x
        self.command(SSD1306_COMSCANINC);                    # reverse y
